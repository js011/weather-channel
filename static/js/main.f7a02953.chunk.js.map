{"version":3,"sources":["utils/apies.js","components/TopBlock/TopBlock.js","data/days.js","components/MainWeather/MainWeather.js","App.js","serviceWorker.js","index.js"],"names":["weather_api","Flash","styled","div","keyframes","flash","FadeIn","fadeIn","TopBlock","showFavouriteLocations","setState","show","state","favouriteLocationsHidden","this","props","onChangeValues","searchWithCity","errorWeather","useMyLocationForWeather","searchWithFavouriteLocation","favouriteLocations","city","className","icon","faCloudSunRain","faStar","onClick","length","map","item","index","key","bind","undefined","title","message","faExclamation","onSubmit","onChange","name","placeholder","value","faSearch","faMapMarkerAlt","React","Component","days","id","fullName","MainWeather","convertToUtcTimeString","Date","toUTCString","getTodayDay","formatted","date","substr","getDay","getWeatherForaSpecificDay","weatherData","day","timezone_offset","weather","filter","dt","getOtherDays","beforeToday","afterToday","getVideoForFon","hourly","src","main","autoPlay","loop","getWeatherForOtherDays","daily","getClassNameForFavouriteLocations","cityName","values","activeOrPassive","classNames","addOrRemoveCityOnFavoutireLocations","addFavouriteLocation","removeFavouriteLocation","proverka","paramsSliderForWeatherToday","slidesPerView","rebuildOnUpdate","paramsSliderForWeatherOtherDays","current","sunrise","sunset","country","faBookmark","faSun","faMoon","description","faUmbrella","faWind","faThermometerQuarter","faTachometerAlt","alt","Math","floor","temp","pop","wind_speed","toFixed","humidity","pressure","max","min","feels_like","App","getWeatherWithCoord","fetch","coord","lat","lon","then","response","json","data","getCityWithCoord","cnt","cod","getWeatherWithCityName","getDateWithTimeZoneDB","e","target","preventDefault","setTimeout","isLoading","geo_success","position","coords","latitude","longitude","geo_error","alert","navigator","geolocation","getCurrentPosition","geo_options","updateFavouriteLocations","push","localStorage","setItem","JSON","stringify","enableHighAccuracy","maximumAge","timeout","parse","getItem","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"yNAAaA,G,MAAc,oC,kXCY3B,IAAMC,EAAQC,IAAOC,IAAV,IACOC,YADP,IACmBC,UAExBC,EAASJ,IAAOC,IAAV,IACQC,YADR,IACoBG,WAqHjBC,E,kDAjHb,aAAe,IAAD,8BACZ,gBAOFC,uBAAyB,WACvB,EAAKC,SAAS,CACZC,MAAO,EAAKC,MAAMD,QAVR,EAcdE,yBAA2B,WACzB,EAAKH,SAAS,CACZC,MAAM,KAbR,EAAKC,MAAQ,CACXD,MAAM,GAJI,E,qDAoBJ,IAAD,SASHG,KAAKC,MAPPC,EAFK,EAELA,eACAC,EAHK,EAGLA,eACAC,EAJK,EAILA,aACAC,EALK,EAKLA,wBACAC,EANK,EAMLA,4BACAC,EAPK,EAOLA,mBACAC,EARK,EAQLA,KAGF,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,YAAb,UACU,IACR,yCACU,kBAAC,IAAD,CAAiBC,KAAMC,QAGnC,yBAAKF,UAAU,uBACb,kBAAC,IAAD,CACEA,UAAU,4BACVC,KAAME,IACNC,QAASb,KAAKL,yBACb,IACH,8BAAOY,EAAmBO,QACzBd,KAAKF,MAAMD,MACV,yBAAKY,UAAS,uBACXF,EAAmBQ,KAAI,SAACC,EAAMC,GAAP,OACtB,kBAACzB,EAAD,CAAQ0B,IAAKF,GACX,uBACEP,UAAU,4BACVI,QAASP,EAA4Ba,KAAK,EAAMH,IAE/CC,EAAQ,EAJX,KAIgBD,UAQ5B,yBAAKP,UAAU,qBAAqBI,QAASb,KAAKD,0BAChD,yBAAKU,UAAU,6BACKW,IAAjBhB,GACC,kBAACjB,EAAD,KACE,uBAAGsB,UAAU,iBAAiBY,MAAOjB,EAAakB,SAChD,kBAAC,IAAD,CAAiBZ,KAAMa,QAI7B,0BAAMC,SAAUrB,GACd,2BACEsB,SAAUvB,EACVwB,KAAK,OACLC,YAAY,cACZlB,UAAU,cACVmB,MAAOpB,IAET,2BAAOK,QAASV,GACd,kBAAC,IAAD,CAAiBO,KAAMmB,SAI7B,yBACEpB,UAAU,0BACVI,QAASR,GAET,2BACE,kBAAC,IAAD,CAAiBK,KAAMoB,MAAmB,IAC1C,mDAGJ,yBAAKrB,UAAU,0BACb,8BAKA,6BACE,uBAAGA,UAAU,0BAAb,gBACA,uBAAGA,UAAU,6BAAb,yD,GAvGSsB,IAAMC,W,QCmBdC,EAtCF,CACT,CACIC,GAAI,EACJR,KAAM,MACNS,SAAU,UAEd,CACID,GAAI,EACJR,KAAM,MACNS,SAAU,UAEd,CACID,GAAI,EACJR,KAAM,MACNS,SAAU,WAEd,CACID,GAAI,EACJR,KAAM,MACNS,SAAU,aAEd,CACID,GAAI,EACJR,KAAM,MACNS,SAAU,YAEd,CACID,GAAI,EACJR,KAAM,MACNS,SAAU,UAEd,CACID,GAAI,EACJR,KAAM,MACNS,SAAU,a,kCCkSHC,E,kDApTb,aAAe,IAAD,8BACZ,gBAcFC,uBAAyB,SAACrB,GAGxB,OAFa,IAAIsB,KAAY,IAAPtB,GAEVuB,eAlBA,EAqBdC,YAAc,WAAO,IACXC,EAAc,EAAKxC,MAAMyC,KAAzBD,UAER,OAAO,IAAIH,KACTG,EAAUE,OAAO,EAAG,GACpBF,EAAUE,OAAO,EAAG,GAAK,EACzBF,EAAUE,OAAO,EAAG,IACpBC,UA5BU,EA+BdC,0BAA4B,SAACC,EAAaC,GAAS,IACzCC,EAAoB,EAAK/C,MAAMgD,QAA/BD,gBAER,OAAOF,EAAYI,QAAO,SAAClC,GACzB,OACE,EAAKqB,uBAAuBrB,EAAKmC,GAAKH,GAAiBL,OAAO,EAAG,KACjEI,MArCQ,EA0CdK,aAAe,WACb,IAAMC,EAAcpB,EAAKiB,QAAO,SAAClC,GAAD,OAAUA,EAAKkB,GAAK,EAAKM,iBAEnDc,EAAarB,EAAKiB,QAAO,SAAClC,GAAD,OAAUA,EAAKkB,GAAK,EAAKM,iBAIxD,MAFqB,sBAAOc,GAAP,YAAsBD,KA/C/B,EAoDdE,eAAiB,WAAO,IACdC,EAAW,EAAKvD,MAAMgD,QAAtBO,OAER,OACE,2BACE/C,UAAU,oBACVgD,IAAG,sBAC6B,QAA9BD,EAAO,GAAGP,QAAQ,GAAGvC,KACjB,cACA8C,EAAO,GAAGP,QAAQ,GAAGS,KAHxB,QAKHC,UAAU,EACVC,MAAM,KAhEE,EAqEdC,uBAAyB,WAGvB,OAFkB,EAAK5D,MAAMgD,QAArBa,MAEKZ,QAAO,SAAClC,EAAMC,GAAP,OAA2B,IAAVA,MAxEzB,EA2Ed8C,kCAAoC,WAAO,IACjCxD,EAAuB,EAAKN,MAA5BM,mBACAyD,EAAa,EAAK/D,MAAMgE,OAAxBD,SACJE,EAAkB,UAEtB,OAA2B,OAAvB3D,EACKA,GAGLA,EAAmBO,OAAS,GAC9BP,EAAmBQ,KAAI,SAACC,GAClBA,IAASgD,IACXE,EAAkB,aAKjBC,IAAW,4BAAD,OAA6BD,MA5FlC,EA+FdE,oCAAsC,WAAO,IAAD,EAKtC,EAAKnE,MAHPM,EAFwC,EAExCA,mBACA8D,EAHwC,EAGxCA,qBACAC,EAJwC,EAIxCA,wBAEMN,EAAa,EAAK/D,MAAMgE,OAAxBD,SACJO,GAAW,EAEf,GAA2B,OAAvBhE,EACF,OAAOA,EAGLA,EAAmBO,OAAS,GAC9BP,EAAmBQ,KAAI,SAACC,GAClBA,IAASgD,IACXO,GAAW,MAGVA,EAGHD,IAFAD,KAKFA,KArHF,EAAKvE,MAAQ,CACX0E,4BAA6B,CAC3BC,cAAe,EACfC,iBAAiB,GAEnBC,gCAAiC,CAC/BF,cAAe,EACfC,iBAAiB,IAVT,E,qDA4HJ,IAAD,SAC6B1E,KAAKC,MAAMgD,QAAvCO,EADD,EACCA,OAAQR,EADT,EACSA,gBADT,EAEyBhD,KAAKC,MAAMgD,QAAQ2B,QAA3CzB,EAFD,EAECA,GAAI0B,EAFL,EAEKA,QAASC,EAFd,EAEcA,OAFd,EAGuB9E,KAAKC,MAAMgE,OAAjCD,EAHD,EAGCA,SAAUe,EAHX,EAGWA,QAElB,OACE,yBAAKtE,UAAU,sBACZT,KAAKuD,iBACN,yBAAK9C,UAAU,gBACb,yBAAKA,UAAU,iBACb,0BACEA,UAAWT,KAAK+D,oCAChBlD,QAASb,KAAKoE,qCAEd,kBAAC,IAAD,CAAiB1D,KAAMsE,OAEzB,yBAAKvE,UAAU,0BACb,6BACE,uBAAGA,UAAU,sBACVuD,EADH,KACee,GAEf,uBAAGtE,UAAU,sBACVT,KAAKqC,uBAAuBc,EAAKH,GAAiBL,OACjD,GACA,KAIN,6BACE,uBAAGlC,UAAU,qBACVwB,EAAKjC,KAAKwC,eAAeL,UAE5B,uBAAG1B,UAAU,oCACVT,KAAKqC,uBAAuBc,EAAKH,GAAiBL,OACjD,EACA,IAGJ,yBAAKlC,UAAU,+BACb,uBAAGA,UAAU,WACX,kBAAC,IAAD,CAAiBC,KAAMuE,MAAU,IAChCjF,KAAKqC,uBACJwC,EAAU7B,GACVL,OAAO,GAAI,IAEf,uBAAGlC,UAAU,UACX,kBAAC,IAAD,CAAiBC,KAAMwE,MAAW,IACjClF,KAAKqC,uBACJyC,EAAS9B,GACTL,OAAO,GAAI,OAKrB,yBAAKlC,UAAU,6BACb,uBAAGA,UAAU,sBACV+C,EAAO,GAAGP,QAAQ,GAAGS,KADxB,IAC+B,IAC7B,8BAAOF,EAAO,GAAGP,QAAQ,GAAGkC,cAE9B,yBAAK1E,UAAU,uBACb,yBAAKA,UAAU,wBACb,uBAAGY,MAAM,mCACP,kBAAC,IAAD,CAAiBX,KAAM0E,OAEzB,uBAAG/D,MAAM,yBACP,kBAAC,IAAD,CAAiBX,KAAM2E,OAEzB,uBAAGhE,MAAM,eACP,kBAAC,IAAD,CAAiBX,KAAM4E,OAEzB,uBAAGjE,MAAM,6BACP,kBAAC,IAAD,CAAiBX,KAAM6E,QAG3B,yBAAK9E,UAAU,sBACb,kBAAC,IAAWT,KAAKF,MAAM0E,4BACpBxE,KAAK6C,0BACJW,EACAxD,KAAKqC,uBAAuBc,EAAKH,GAAiBL,OAChD,EACA,IAEF5B,KAAI,SAACC,GACL,OACE,yBACEP,UAAU,qBACVS,IAAKF,EAAKmC,GAAKH,GAEf,2BACG,EAAKX,uBACJrB,EAAKmC,GAAKH,GACVL,OAAO,GAAI,IAEf,yBACElC,UAAU,oBACVgD,IAAG,4CAAuCzC,EAAKiC,QAAQ,GAAGvC,KAAvD,WACH8E,IAAKxE,EAAKiC,QAAQ,GAAGkC,cAEvB,uBAAG1E,UAAU,sBACVgF,KAAKC,MAAM1E,EAAK2E,MADnB,SAGA,uBAAGlF,UAAU,qBAAqBO,EAAK4E,IAAvC,KACA,uBAAGnF,UAAU,sBACVO,EAAK6E,WAAWC,QAAQ,GAD3B,QAGA,uBAAGrF,UAAU,0BACVO,EAAK+E,SADR,KAGA,uBAAGtF,UAAU,sBACVO,EAAKgF,SADR,iBAWhB,yBAAKvF,UAAU,qBACb,yBAAKA,UAAU,4BACb,uBAAGY,MAAM,mCACP,kBAAC,IAAD,CAAiBX,KAAM0E,OAEzB,uBAAG/D,MAAM,yBACP,kBAAC,IAAD,CAAiBX,KAAM2E,OAEzB,uBAAGhE,MAAM,eACP,kBAAC,IAAD,CAAiBX,KAAM4E,OAEzB,uBAAGjE,MAAM,6BACP,kBAAC,IAAD,CAAiBX,KAAM6E,QAG3B,kBAAC,IAAWvF,KAAKF,MAAM6E,gCACpB3E,KAAK6D,yBAAyB9C,KAAI,SAACC,GAClC,OACE,yBAAKE,IAAKF,EAAKmC,GAAI1C,UAAU,0BAC3B,uBAAGA,UAAU,2BACV,EAAK4B,uBAAuBrB,EAAKmC,IAAIR,OAAO,EAAG,GAChD,6BACA,8BACG,EAAKN,uBAAuBrB,EAAKmC,IAAIR,OAAO,EAAG,KAGpD,uBAAGlC,UAAU,0BACVO,EAAKiC,QAAQ,GAAGS,MAEnB,yBACEjD,UAAU,wBACVgD,IAAG,4CAAuCzC,EAAKiC,QAAQ,GAAGvC,KAAvD,WACH8E,IAAKxE,EAAKiC,QAAQ,GAAGkC,cAEvB,uBAAG1E,UAAU,iCACVgF,KAAKC,MAAM1E,EAAK2E,KAAKM,KADxB,UACkCR,KAAKC,MAAM1E,EAAK2E,KAAKO,KADvD,QAIA,uBAAGzF,UAAU,kCAAb,aACA,uBAAGA,UAAU,sCACVgF,KAAKC,MAAM1E,EAAKmF,WAAWpD,KAD9B,SAGA,uBAAGtC,UAAU,wDACVO,EAAK4E,IADR,KAGA,uBAAGnF,UAAU,kCACVO,EAAK6E,WAAWC,QAAQ,GAD3B,QAGA,uBAAGrF,UAAU,kCACVO,EAAK+E,SADR,KAGA,uBAAGtF,UAAU,gDACVO,EAAKgF,SADR,oB,GAvSMjE,IAAMC,WC4OjBoE,E,kDAlPb,aAAe,IAAD,8BACZ,gBA4BFC,oBAAsB,WACpB,OAAOC,MAAM,uDAAD,OAC6C,EAAKxG,MAAMyG,MAAMC,IAD9D,gBACyE,EAAK1G,MAAMyG,MAAME,IAD1F,kBACuGvH,EADvG,kBAGTwH,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKjH,SAAS,CAAEqD,QAAS4D,QArCjB,EAyCdC,iBAAmB,WAAO,IAChBC,EAAQ,EAAKjH,MAAMmE,OAAnB8C,IADe,EAEF,EAAKjH,MAAMyG,MAAxBC,EAFe,EAEfA,IAAKC,EAFU,EAEVA,IAEb,OAAOH,MAAM,0DAAD,OACgDpH,EADhD,wBAC2EsH,EAD3E,gBACsFC,EADtF,gBACiGM,EADjG,kBAGTL,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACY,QAAbA,EAAKG,KACP,EAAKpH,SAAS,CACZqE,OAAO,2BACF,EAAKnE,MAAMmE,QADV,IAEJD,SAAU6C,EAAKrG,KAAKkB,KACpBqD,QAAS8B,EAAKrG,KAAKuE,gBAzDjB,EAgEdkC,uBAAyB,WAAO,IAAD,EACP,EAAKnH,MAAMmE,OAAzBzD,EADqB,EACrBA,KAAMuG,EADe,EACfA,IAEd,OAAOT,MAAM,0DAAD,OACgDpH,EADhD,sBACyEsB,EADzE,gBACqFuG,EADrF,kBAGTL,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACY,QAAbA,EAAKG,IACP,EAAKpH,SAAS,CACZ2G,MAAO,CAAEC,IAAKK,EAAKrG,KAAK+F,MAAMC,IAAKC,IAAKI,EAAKrG,KAAK+F,MAAME,KACxDrG,kBAAcgB,EACd6C,OAAO,2BACF,EAAKnE,MAAMmE,QADV,IAEJD,SAAU6C,EAAKrG,KAAKkB,KACpBqD,QAAS8B,EAAKrG,KAAKuE,YAIvB,EAAKnF,SAAS,CAAEQ,aAAcyG,QArFxB,EA0FdK,sBAAwB,WAAO,IAAD,EACP,EAAKpH,MAAMyG,MAAxBC,EADoB,EACpBA,IAAKC,EADe,EACfA,IAEb,OAAOH,MAAM,qDAAD,OJpGa,eIoGb,wCACwFE,EADxF,gBACmGC,IAE5GC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKjH,SAAS,CAAE8C,KAAMmE,QApGd,EAwGd3G,eAAiB,SAACiH,GAChB,EAAKvH,SAAS,CACZqE,OAAO,2BACF,EAAKnE,MAAMmE,QADV,kBAEHkD,EAAEC,OAAO1F,KAAOyF,EAAEC,OAAOxF,WA5GlB,EAiHdzB,eAAiB,SAACgH,GAChBA,EAAEE,iBAEF,EAAKJ,yBACLK,YAAW,WACT,EAAKjB,sBACL,EAAKa,0BACJ,MAxHS,EA2Hd5G,4BAA8B,SAACU,EAAMC,EAAOkG,GAC1C,EAAKvH,SAAS,CACZqE,OAAO,2BACF,EAAKnE,MAAMmE,QADV,IAEJzD,KAAMQ,MAIVsG,YAAW,WACT,EAAKL,2BACJ,KAEHK,YAAW,WACT,EAAKjB,sBACL,EAAKa,0BACJ,MA1IS,EA6IdK,UAAY,SAACvG,GACX,YAAgBI,IAATJ,GA9IK,EAiJdwG,YAAc,SAACC,GACb,EAAK7H,SAAS,CACZ2G,MAAO,CACLC,IAAKiB,EAASC,OAAOC,SACrBlB,IAAKgB,EAASC,OAAOE,cArJb,EA0JdC,UAAY,WACVC,MAAM,KA3JM,EA8JdzH,wBAA0B,WACxB0H,UAAUC,YAAYC,mBACpB,EAAKT,YACL,EAAKK,UACL,EAAK/H,MAAMoI,aAGbZ,YAAW,WACT,EAAKjB,sBACL,EAAKS,mBACL,EAAKI,0BACJ,MAzKS,EA4Kd7C,qBAAuB,WACrB,IAAM8D,EAA2B,EAAKrI,MAAMS,mBAC5C4H,EAAyBC,KAAK,EAAKtI,MAAMmE,OAAOD,UAEhDqE,aAAaC,QACX,qBACAC,KAAKC,UAAUL,IAGjB,EAAKvI,SAAS,CACZW,mBAAoB4H,KAtLV,EA0Ld7D,wBAA0B,WACxB,EAAK1E,SAAS,CACZW,mBAAoB,EAAKT,MAAMS,mBAAmB2C,QAAO,SAAClC,GACxD,OAAOA,IAAS,EAAKlB,MAAMmE,OAAOD,cAItCsD,YAAW,WACTe,aAAaC,QACX,qBACAC,KAAKC,UAAU,EAAK1I,MAAMS,uBAE3B,MAnMH,EAAKT,MAAQ,CACXyG,MAAO,CACLC,IAAK,QACLC,IAAK,SAEPxC,OAAQ,CACNzD,KAAM,OACNuG,IAAK,GAEPmB,YAAa,CACXO,oBAAoB,EACpBC,WAAY,IACZC,QAAS,KAEXpI,mBAAoBgI,KAAKK,MACvBP,aAAaQ,QAAQ,wBAClB,IAnBK,E,gEAwBZ7I,KAAKiH,yBACLjH,KAAKkH,wBACLlH,KAAKqG,wB,+BAgLL,OACGrG,KAAKuH,UAAUvH,KAAKF,MAAMmD,UAC1BjD,KAAKuH,UAAUvH,KAAKF,MAAM4C,OAC1B1C,KAAKuH,UAAUvH,KAAKF,MAAMmD,SAc3B,oCACE,kBAAC,EAAD,CACE/C,eAAgBF,KAAKE,eACrBC,eAAgBH,KAAKG,eACrBC,aAAcJ,KAAKF,MAAMM,aACzBC,wBAAyBL,KAAKK,wBAC9BE,mBAAoBP,KAAKF,MAAMS,mBAC/BD,4BAA6BN,KAAKM,4BAClCE,KAAMR,KAAKF,MAAMmE,OAAOzD,OAE1B,kBAAC,EAAD,CACEyC,QAASjD,KAAKF,MAAMmD,QACpBP,KAAM1C,KAAKF,MAAM4C,KACjBuB,OAAQjE,KAAKF,MAAMmE,OACnB1D,mBAAoBP,KAAKF,MAAMS,mBAC/B8D,qBAAsBrE,KAAKqE,qBAC3BC,wBAAyBtE,KAAKsE,2BA3BhC,yBAAK7D,UAAU,gBACb,uBAAGA,UAAU,aAAb,UACU,IACR,yCACU,kBAAC,IAAD,CAAiBC,KAAMC,a,GArN3BoB,IAAMC,WCIJ8G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCVNC,IAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,SAAU,gBAIzBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDmHpB,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1I,a","file":"static/js/main.f7a02953.chunk.js","sourcesContent":["export const weather_api = '99fef1354fa6f839a4bc705007d6f6ff'\r\n\r\nexport const time_zone_api = 'UMWFU8OD2ZN5'\r\n\r\nexport const aeris_access_ID = 'DhTAxVwNCRKnHTnBSKoQ2'\r\n\r\nexport const aeris_secret_key = 'PvYGwXtN13RDVdAWEUw1fQMVV6Ff8y1oGzIr7x1d'\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faCloudSunRain,\r\n  faSearch,\r\n  faMapMarkerAlt,\r\n  faExclamation,\r\n  faStar,\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { flash, fadeIn } from 'react-animations'\r\n\r\nconst Flash = styled.div`\r\n  animation: 1s ${keyframes`${flash}`};\r\n`\r\nconst FadeIn = styled.div`\r\n  animation: 0.3s ${keyframes`${fadeIn}`};\r\n`\r\n\r\nclass TopBlock extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      show: false,\r\n    }\r\n  }\r\n\r\n  showFavouriteLocations = () => {\r\n    this.setState({\r\n      show: !this.state.show,\r\n    })\r\n  }\r\n\r\n  favouriteLocationsHidden = () => {\r\n    this.setState({\r\n      show: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onChangeValues,\r\n      searchWithCity,\r\n      errorWeather,\r\n      useMyLocationForWeather,\r\n      searchWithFavouriteLocation,\r\n      favouriteLocations,\r\n      city,\r\n    } = this.props\r\n\r\n    return (\r\n      <div className=\"top-block\">\r\n        <div className=\"top-logo-block\">\r\n          <p className=\"top-logo\">\r\n            Weather{' '}\r\n            <span>\r\n              Channel <FontAwesomeIcon icon={faCloudSunRain} />\r\n            </span>\r\n          </p>\r\n          <div className=\"top-Favourite-block\">\r\n            <FontAwesomeIcon\r\n              className=\"top-Favourite-block__icon\"\r\n              icon={faStar}\r\n              onClick={this.showFavouriteLocations}\r\n            />{' '}\r\n            <span>{favouriteLocations.length}</span>\r\n            {this.state.show && (\r\n              <div className={`favourite-locations`}>\r\n                {favouriteLocations.map((item, index) => (\r\n                  <FadeIn key={item}>\r\n                    <p\r\n                      className=\"favourite-locations__name\"\r\n                      onClick={searchWithFavouriteLocation.bind(this, item)}\r\n                    >\r\n                      {index + 1}. {item}\r\n                    </p>\r\n                  </FadeIn>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"top-settings-block\" onClick={this.favouriteLocationsHidden}>\r\n          <div className=\"top-searchCity-block\">\r\n            {errorWeather !== undefined && (\r\n              <Flash>\r\n                <p className=\"error-cityName\" title={errorWeather.message}>\r\n                  <FontAwesomeIcon icon={faExclamation} />\r\n                </p>\r\n              </Flash>\r\n            )}\r\n            <form onSubmit={searchWithCity}>\r\n              <input\r\n                onChange={onChangeValues}\r\n                name=\"city\"\r\n                placeholder=\"Search city\"\r\n                className=\"search-city\"\r\n                value={city}\r\n              />\r\n              <label onClick={searchWithCity}>\r\n                <FontAwesomeIcon icon={faSearch} />\r\n              </label>\r\n            </form>\r\n          </div>\r\n          <div\r\n            className=\"top-useMyLocation-block\"\r\n            onClick={useMyLocationForWeather}\r\n          >\r\n            <p>\r\n              <FontAwesomeIcon icon={faMapMarkerAlt} />{' '}\r\n              <span>Use my location</span>\r\n            </p>\r\n          </div>\r\n          <div className=\"top-addLocations-block\">\r\n            <div>\r\n              {/* <p>\r\n                <FontAwesomeIcon icon={faPlusCircle} />\r\n              </p> */}\r\n            </div>\r\n            <div>\r\n              <p className=\"top-addLocations-title\">Add location</p>\r\n              <p className=\"top-addLocations-subTitle\">\r\n                Did you know you can add favourite locations?\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopBlock\r\n","const days = [\r\n    {\r\n        id: 0,\r\n        name: 'Sun',\r\n        fullName: 'Sunday'\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'Mon',\r\n        fullName: 'Monday'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Tue',\r\n        fullName: 'Tuesday'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Wed',\r\n        fullName: 'Wednesday'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Thu',\r\n        fullName: 'Thursday'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Fri',\r\n        fullName: 'Friday'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Sat',\r\n        fullName: 'Saturday'\r\n    }\r\n]\r\n\r\nexport default days","import React from 'react'\r\nimport days from '../../data/days'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faSun,\r\n  faMoon,\r\n  faUmbrella,\r\n  faWind,\r\n  faThermometerQuarter,\r\n  faTachometerAlt,\r\n  faBookmark,\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport Swiper from 'react-id-swiper'\r\nimport classNames from 'classnames/bind'\r\n\r\nclass MainWeather extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      paramsSliderForWeatherToday: {\r\n        slidesPerView: 7,\r\n        rebuildOnUpdate: true,\r\n      },\r\n      paramsSliderForWeatherOtherDays: {\r\n        slidesPerView: 5,\r\n        rebuildOnUpdate: true,\r\n      },\r\n    }\r\n  }\r\n\r\n  convertToUtcTimeString = (item) => {\r\n    const date = new Date(item * 1000)\r\n\r\n    return date.toUTCString()\r\n  }\r\n\r\n  getTodayDay = () => {\r\n    const { formatted } = this.props.date\r\n\r\n    return new Date(\r\n      formatted.substr(0, 4),\r\n      formatted.substr(6, 1) - 1,\r\n      formatted.substr(8, 2)\r\n    ).getDay()\r\n  }\r\n\r\n  getWeatherForaSpecificDay = (weatherData, day) => {\r\n    const { timezone_offset } = this.props.weather\r\n\r\n    return weatherData.filter((item) => {\r\n      return (\r\n        this.convertToUtcTimeString(item.dt + timezone_offset).substr(5, 2) ===\r\n        day\r\n      )\r\n    })\r\n  }\r\n\r\n  getOtherDays = () => {\r\n    const beforeToday = days.filter((item) => item.id < this.getTodayDay())\r\n\r\n    const afterToday = days.filter((item) => item.id > this.getTodayDay())\r\n\r\n    const resultOtherDays = [...afterToday, ...beforeToday]\r\n\r\n    return resultOtherDays\r\n  }\r\n\r\n  getVideoForFon = () => {\r\n    const { hourly } = this.props.weather\r\n\r\n    return (\r\n      <video\r\n        className=\"weather-video-fon\"\r\n        src={`weather-fon/${\r\n          hourly[0].weather[0].icon === '01n'\r\n            ? 'Clear-night'\r\n            : hourly[0].weather[0].main\r\n        }.mp4`}\r\n        autoPlay={true}\r\n        loop={true}\r\n      ></video>\r\n    )\r\n  }\r\n\r\n  getWeatherForOtherDays = () => {\r\n    const { daily } = this.props.weather\r\n\r\n    return daily.filter((item, index) => index !== 0)\r\n  }\r\n\r\n  getClassNameForFavouriteLocations = () => {\r\n    const { favouriteLocations } = this.props\r\n    const { cityName } = this.props.values\r\n    let activeOrPassive = 'passive'\r\n\r\n    if (favouriteLocations === null) {\r\n      return favouriteLocations\r\n    }\r\n\r\n    if (favouriteLocations.length > 0) {\r\n      favouriteLocations.map((item) => {\r\n        if (item === cityName) {\r\n          activeOrPassive = 'active'\r\n        }\r\n      })\r\n    }\r\n\r\n    return classNames(`favouriteLocations-block ${activeOrPassive}`)\r\n  }\r\n\r\n  addOrRemoveCityOnFavoutireLocations = () => {\r\n    const {\r\n      favouriteLocations,\r\n      addFavouriteLocation,\r\n      removeFavouriteLocation,\r\n    } = this.props\r\n    const { cityName } = this.props.values\r\n    let proverka = false\r\n\r\n    if (favouriteLocations === null) {\r\n      return favouriteLocations\r\n    }\r\n\r\n    if (favouriteLocations.length > 0) {\r\n      favouriteLocations.map((item) => {\r\n        if (item === cityName) {\r\n          proverka = true\r\n        }\r\n      })\r\n      if (!proverka) {\r\n        addFavouriteLocation()\r\n      } else {\r\n        removeFavouriteLocation()\r\n      }\r\n    } else {\r\n      addFavouriteLocation()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { hourly, timezone_offset } = this.props.weather\r\n    const { dt, sunrise, sunset } = this.props.weather.current\r\n    const { cityName, country } = this.props.values\r\n\r\n    return (\r\n      <div className=\"main-weather-block\">\r\n        {this.getVideoForFon()}\r\n        <div className=\"shadow-block\">\r\n          <div className=\"weather-today\">\r\n            <span\r\n              className={this.getClassNameForFavouriteLocations()}\r\n              onClick={this.addOrRemoveCityOnFavoutireLocations}\r\n            >\r\n              <FontAwesomeIcon icon={faBookmark} />\r\n            </span>\r\n            <div className=\"weather-today-topBlock\">\r\n              <div>\r\n                <p className=\"weather-today-city\">\r\n                  {cityName}, {country}\r\n                </p>\r\n                <p className=\"weather-today-time\">\r\n                  {this.convertToUtcTimeString(dt + timezone_offset).substr(\r\n                    17,\r\n                    5\r\n                  )}\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <p className=\"weather-today-day\">\r\n                  {days[this.getTodayDay()].fullName}\r\n                </p>\r\n                <p className=\"weather-today-dayOnMonthAndMonth\">\r\n                  {this.convertToUtcTimeString(dt + timezone_offset).substr(\r\n                    5,\r\n                    6\r\n                  )}\r\n                </p>\r\n                <div className=\"weather-today-sunRiseAndSet\">\r\n                  <p className=\"sunrise\">\r\n                    <FontAwesomeIcon icon={faSun} />{' '}\r\n                    {this.convertToUtcTimeString(\r\n                      sunrise + timezone_offset\r\n                    ).substr(17, 5)}\r\n                  </p>\r\n                  <p className=\"sunset\">\r\n                    <FontAwesomeIcon icon={faMoon} />{' '}\r\n                    {this.convertToUtcTimeString(\r\n                      sunset + timezone_offset\r\n                    ).substr(17, 5)}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"weather-today-bottomBlock\">\r\n              <p className=\"weather-today-desc\">\r\n                {hourly[0].weather[0].main},{' '}\r\n                <span>{hourly[0].weather[0].description}</span>\r\n              </p>\r\n              <div className=\"weather-today-items\">\r\n                <div className=\"weather-today-prompt\">\r\n                  <p title=\"Probability of precipitation, %\">\r\n                    <FontAwesomeIcon icon={faUmbrella} />\r\n                  </p>\r\n                  <p title=\"Wind speed, meter/sec\">\r\n                    <FontAwesomeIcon icon={faWind} />\r\n                  </p>\r\n                  <p title=\"Humidity, %\">\r\n                    <FontAwesomeIcon icon={faThermometerQuarter} />\r\n                  </p>\r\n                  <p title=\"Atmospheric pressure, hPa\">\r\n                    <FontAwesomeIcon icon={faTachometerAlt} />\r\n                  </p>\r\n                </div>\r\n                <div className=\"weather-today-list\">\r\n                  <Swiper {...this.state.paramsSliderForWeatherToday}>\r\n                    {this.getWeatherForaSpecificDay(\r\n                      hourly,\r\n                      this.convertToUtcTimeString(dt + timezone_offset).substr(\r\n                        5,\r\n                        2\r\n                      )\r\n                    ).map((item) => {\r\n                      return (\r\n                        <div\r\n                          className=\"weather-today-item\"\r\n                          key={item.dt + timezone_offset}\r\n                        >\r\n                          <p>\r\n                            {this.convertToUtcTimeString(\r\n                              item.dt + timezone_offset\r\n                            ).substr(17, 5)}\r\n                          </p>\r\n                          <img\r\n                            className=\"weather-today-img\"\r\n                            src={`https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`}\r\n                            alt={item.weather[0].description}\r\n                          />\r\n                          <p className=\"weather-today-temp\">\r\n                            {Math.floor(item.temp)} °\r\n                          </p>\r\n                          <p className=\"weather-today-pop\">{item.pop}%</p>\r\n                          <p className=\"weather-today-wind\">\r\n                            {item.wind_speed.toFixed(1)} m/s\r\n                          </p>\r\n                          <p className=\"weather-today-humidity\">\r\n                            {item.humidity}%\r\n                          </p>\r\n                          <p className=\"weather-today-wind\">\r\n                            {item.pressure} hPa\r\n                          </p>\r\n                        </div>\r\n                      )\r\n                    })}\r\n                  </Swiper>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"weather-otherDays\">\r\n            <div className=\"weather-otherDays-prompt\">\r\n              <p title=\"Probability of precipitation, %\">\r\n                <FontAwesomeIcon icon={faUmbrella} />\r\n              </p>\r\n              <p title=\"Wind speed, meter/sec\">\r\n                <FontAwesomeIcon icon={faWind} />\r\n              </p>\r\n              <p title=\"Humidity, %\">\r\n                <FontAwesomeIcon icon={faThermometerQuarter} />\r\n              </p>\r\n              <p title=\"Atmospheric pressure, hPa\">\r\n                <FontAwesomeIcon icon={faTachometerAlt} />\r\n              </p>\r\n            </div>\r\n            <Swiper {...this.state.paramsSliderForWeatherOtherDays}>\r\n              {this.getWeatherForOtherDays().map((item) => {\r\n                return (\r\n                  <div key={item.dt} className=\"weather-otherDays-item\">\r\n                    <p className=\"weather-otherDays-title\">\r\n                      {this.convertToUtcTimeString(item.dt).substr(0, 3)}\r\n                      <br />\r\n                      <span>\r\n                        {this.convertToUtcTimeString(item.dt).substr(5, 6)}\r\n                      </span>\r\n                    </p>\r\n                    <p className=\"weather-otherDays-desc\">\r\n                      {item.weather[0].main}\r\n                    </p>\r\n                    <img\r\n                      className=\"weather-otherDays-img\"\r\n                      src={`https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`}\r\n                      alt={item.weather[0].description}\r\n                    />\r\n                    <p className=\"weather-otherDays-max-minTemp\">\r\n                      {Math.floor(item.temp.max)}° / {Math.floor(item.temp.min)}\r\n                      °\r\n                    </p>\r\n                    <p className=\"weather-otherDays-realFellTemp\">Real Feel</p>\r\n                    <p className=\"weather-otherDays-feelsLikeDayTemp\">\r\n                      {Math.floor(item.feels_like.day)} °\r\n                    </p>\r\n                    <p className=\"weather-otherDays-pop weather-otherDays-promptBlocks\">\r\n                      {item.pop}%\r\n                    </p>\r\n                    <p className=\"weather-otherDays-promptBlocks\">\r\n                      {item.wind_speed.toFixed(1)} m/s\r\n                    </p>\r\n                    <p className=\"weather-otherDays-promptBlocks\">\r\n                      {item.humidity}%\r\n                    </p>\r\n                    <p className=\"weather-otherDays-promptBlocks border-bottom\">\r\n                      {item.pressure} hPa\r\n                    </p>\r\n                  </div>\r\n                )\r\n              })}\r\n            </Swiper>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainWeather\r\n","import React from 'react'\nimport './App.css'\nimport { weather_api, time_zone_api } from './utils/apies'\nimport TopBlock from './components/TopBlock/TopBlock'\nimport MainWeather from './components/MainWeather/MainWeather'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCloudSunRain } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      coord: {\n        lat: 50.4333,\n        lon: 30.5167,\n      },\n      values: {\n        city: 'Kyiv',\n        cnt: 1,\n      },\n      geo_options: {\n        enableHighAccuracy: true,\n        maximumAge: 30000,\n        timeout: 10000,\n      },\n      favouriteLocations: JSON.parse(\n        localStorage.getItem('favouriteLocations')\n      ) || [],\n    }\n  }\n\n  componentDidMount() {\n    this.getWeatherWithCityName()\n    this.getDateWithTimeZoneDB()\n    this.getWeatherWithCoord()\n  }\n\n  getWeatherWithCoord = () => {\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.coord.lat}&lon=${this.state.coord.lon}&appid=${weather_api}&units=Metric`\n    )\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        this.setState({ weather: data })\n      })\n  }\n\n  getCityWithCoord = () => {\n    const { cnt } = this.state.values\n    const { lat, lon } = this.state.coord\n\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?appid=${weather_api}&lang=en&lat=${lat}&lon=${lon}&cnt=${cnt}&units=Metric`\n    )\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        if (data.cod === '200') {\n          this.setState({\n            values: {\n              ...this.state.values,\n              cityName: data.city.name,\n              country: data.city.country,\n            },\n          })\n        }\n      })\n  }\n\n  getWeatherWithCityName = () => {\n    const { city, cnt } = this.state.values\n\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?appid=${weather_api}&lang=en&q=${city}&cnt=${cnt}&units=Metric`\n    )\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        if (data.cod === '200') {\n          this.setState({\n            coord: { lat: data.city.coord.lat, lon: data.city.coord.lon },\n            errorWeather: undefined,\n            values: {\n              ...this.state.values,\n              cityName: data.city.name,\n              country: data.city.country,\n            },\n          })\n        } else {\n          this.setState({ errorWeather: data })\n        }\n      })\n  }\n\n  getDateWithTimeZoneDB = () => {\n    const { lat, lon } = this.state.coord\n\n    return fetch(\n      `https://api.timezonedb.com/v2.1/get-time-zone?key=${time_zone_api}&format=json&by=position&lat=${lat}&lng=${lon}`\n    )\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        this.setState({ date: data })\n      })\n  }\n\n  onChangeValues = (e) => {\n    this.setState({\n      values: {\n        ...this.state.values,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  searchWithCity = (e) => {\n    e.preventDefault()\n\n    this.getWeatherWithCityName()\n    setTimeout(() => {\n      this.getWeatherWithCoord()\n      this.getDateWithTimeZoneDB()\n    }, 500)\n  }\n\n  searchWithFavouriteLocation = (item, index, e) => {\n    this.setState({\n      values: {\n        ...this.state.values,\n        city: item,\n      },\n    })\n\n    setTimeout(() => {\n      this.getWeatherWithCityName()\n    }, 500)\n\n    setTimeout(() => {\n      this.getWeatherWithCoord()\n      this.getDateWithTimeZoneDB()\n    }, 1000)\n  }\n\n  isLoading = (item) => {\n    return item === undefined ? false : true\n  }\n\n  geo_success = (position) => {\n    this.setState({\n      coord: {\n        lat: position.coords.latitude,\n        lon: position.coords.longitude,\n      },\n    })\n  }\n\n  geo_error = () => {\n    alert('')\n  }\n\n  useMyLocationForWeather = () => {\n    navigator.geolocation.getCurrentPosition(\n      this.geo_success,\n      this.geo_error,\n      this.state.geo_options\n    )\n\n    setTimeout(() => {\n      this.getWeatherWithCoord()\n      this.getCityWithCoord()\n      this.getDateWithTimeZoneDB()\n    }, 500)\n  }\n\n  addFavouriteLocation = () => {\n    const updateFavouriteLocations = this.state.favouriteLocations\n    updateFavouriteLocations.push(this.state.values.cityName)\n\n    localStorage.setItem(\n      'favouriteLocations',\n      JSON.stringify(updateFavouriteLocations)\n    )\n\n    this.setState({\n      favouriteLocations: updateFavouriteLocations,\n    })\n  }\n\n  removeFavouriteLocation = () => {\n    this.setState({\n      favouriteLocations: this.state.favouriteLocations.filter((item) => {\n        return item !== this.state.values.cityName\n      }),\n    })\n\n    setTimeout(() => {\n      localStorage.setItem(\n        'favouriteLocations',\n        JSON.stringify(this.state.favouriteLocations)\n      )\n    }, 500)\n  }\n\n  render() {\n    if (\n      !this.isLoading(this.state.weather) ||\n      !this.isLoading(this.state.date) ||\n      !this.isLoading(this.state.weather)\n    ) {\n      return (\n        <div className=\"center-block\">\n          <p className=\"load-logo\">\n            Weather{' '}\n            <span>\n              Channel <FontAwesomeIcon icon={faCloudSunRain} />\n            </span>\n          </p>\n        </div>\n      )\n    }\n    return (\n      <>\n        <TopBlock\n          onChangeValues={this.onChangeValues}\n          searchWithCity={this.searchWithCity}\n          errorWeather={this.state.errorWeather}\n          useMyLocationForWeather={this.useMyLocationForWeather}\n          favouriteLocations={this.state.favouriteLocations}\n          searchWithFavouriteLocation={this.searchWithFavouriteLocation}\n          city={this.state.values.city}\n        />\n        <MainWeather\n          weather={this.state.weather}\n          date={this.state.date}\n          values={this.state.values}\n          favouriteLocations={this.state.favouriteLocations}\n          addFavouriteLocation={this.addFavouriteLocation}\n          removeFavouriteLocation={this.removeFavouriteLocation}\n        />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\nimport 'swiper/swiper-bundle.css';\n\nWebFont.load({\n  google: {\n    families: ['Roboto', 'Open Sans']\n  }\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}